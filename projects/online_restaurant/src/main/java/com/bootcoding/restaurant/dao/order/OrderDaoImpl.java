package com.bootcoding.restaurant.dao.order;

import com.bootcoding.restaurant.common.DatabaseConfiguration;
import com.bootcoding.restaurant.common.DefaultConfiguration;
import com.bootcoding.restaurant.common.OrderStatus;
import com.bootcoding.restaurant.common.TableHeaders;
import com.bootcoding.restaurant.dao.entity.Order;
import com.bootcoding.restaurant.dao.entity.OrderItem;
import com.bootcoding.restaurant.utils.DBUtils;
import org.springframework.jdbc.core.BatchPreparedStatementSetter;
import org.springframework.jdbc.core.PreparedStatementSetter;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

/**
 * @author bootcoding on 18/09/22
 * @project software_development_training
 */
public class OrderDaoImpl implements OrderDao{

    private final DatabaseConfiguration databaseConfiguration;
    private final DefaultConfiguration defaultConfiguration;

    public OrderDaoImpl(DatabaseConfiguration databaseConfiguration, DefaultConfiguration defaultConfiguration) {
        this.databaseConfiguration = databaseConfiguration;
        this.defaultConfiguration = defaultConfiguration;
    }

    @Override
    public OrderStatus createOrder(Order order, List<OrderItem> menuItems) {

        int orderId = this.databaseConfiguration.getJdbcTemplate()
            .update(DBUtils.buildAndGetInsertQuery(defaultConfiguration.getOrderTable(), TableHeaders.ORDER_TABLE_COLS), new PreparedStatementSetter() {
                @Override
                public void setValues(PreparedStatement ps) throws SQLException {
                    int parameterIndex = 1;
                    ps.setLong(parameterIndex++, order.getCustomerId());
                    ps.setDouble(parameterIndex++, order.getTotalPrice());
                    ps.setString(parameterIndex++, order.getDeliveryAddress());
                    ps.setString(parameterIndex++, order.getOrderStatus().name());
                    ps.setTimestamp(parameterIndex++, DBUtils.getTimestamp(order.getCreatedAt()));
                    ps.setTimestamp(parameterIndex, DBUtils.getTimestamp(order.getModifiedAt()));
                }
            });
        /* Set new order id generated by database on insert operation */
        order.setId(orderId);
        insertOrderMenuItems(order, menuItems);
        return OrderStatus.NEW;
    }

    private void insertOrderMenuItems(Order order, List<OrderItem> menuItems){
        menuItems.forEach(item -> item.setOrderId(order.getId()));
        this.databaseConfiguration.getJdbcTemplate().batchUpdate(
            DBUtils.buildAndGetInsertQuery(defaultConfiguration.getOrderMenuTable(), TableHeaders.ORDER_MENU_ITEM_TABLE_COLS),
            new BatchPreparedStatementSetter() {
                @Override
                public void setValues(PreparedStatement ps, int i) throws SQLException {
                    int parameterIndex = 1;
                    OrderItem menuItem = menuItems.get(i);
                    ps.setLong(parameterIndex++, menuItem.getOrderId());
                    ps.setLong(parameterIndex++, menuItem.getVendorId());
                    ps.setString(parameterIndex++, menuItem.getItemName());
                    ps.setString(parameterIndex++, menuItem.getMenuCategory());
                    ps.setString(parameterIndex++, menuItem.getDescription());
                    ps.setBoolean(parameterIndex++, menuItem.isVeg());
                    ps.setLong(parameterIndex++, menuItem.getQuantity());
                    ps.setDouble(parameterIndex, menuItem.getPrice());
                }

                @Override
                public int getBatchSize() {
                    return menuItems.size();
                }
            });
    }
    @Override
    public void updateOrderStatus(long orderId, OrderStatus orderStatus) {

    }


    @Override
    public void createTable() {

    }

    public static void main(String args[])
    {
        int index, count, n = 5;
        for (index=0; index<n; index++)
        {
            for (count=0; count<=index; count++ )
            {
                System.out.print("* ");
            }
            for (count=2*(n-index); count>=0; count--)
            {
                System.out.print(" ");
            }
            System.out.println();
        }
    }
}
